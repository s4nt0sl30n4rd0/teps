#!/usr/bin/env bash
#
# teps: replaces spaces in file and directory names.
#
# Copyright (C) 2018-2021 Leonardo Santos <https://github.com/s4nt0sl30n4rd0/>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# -------------------------------------------------------------------------
usage(){
cat << EOF
Usage:
     $(basename "$0") TARGET
     $(basename "$0") {-r|--recursive DIRECTORY}
     $(basename "$0") [-h|--help]

     Replaces spaces in file and directory names.

     Exchanges spaces for underscores in file and directory names
     recursively (or not) within the given directory, including itself.

Options:
     TARGET          Relative or absolute path of a file or directory.
     DIRECTORY       Relative or absolute path of a directory.
     -r|--recursive  Replace recursively.
     -h|--help       Display this help and exit.

Exit Status:
     Returns 0 for success and 1 for failure.
EOF
}

[ -z "$1" ] \
&& {
  usage
  exit 1
}

[[ "$1" = '-h' || "$1" = '--help' ]] \
&& {
  usage
  exit 0
}

rename(){
  space=1

  while [ $space -ne 0 ]
  do
    find . -print0 | xargs -0 prename 's/ /_/' ./* 2>&-
    space=$(find . -print0 | grep -c ' ')
  done
}

[[ "$1" = '-r' || "$1" = '--recursive' ]] \
&& {
  shift

  [[ ! -d "$1" || -z "$1" ]] \
  && {
    echo 'Error: directory not found.'
    exit 1
  }

  cd "$1" || exit 1
  rename
  cd ..

  target=$(basename "$1")

  mv "$target" "${target// /_}" 2>&-
  exit 0
}

[ ! -e "$1" ] \
&& {
  echo 'Error: file or directory not found.'
  exit 1
}

[ -e "$1" ] \
&& {
  cd "$(dirname "$1")" || exit 1

  target=$(basename "$1")

  mv "$target" "${target// /_}" 2>&-
  exit 0
}
